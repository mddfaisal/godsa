package threesumclosest_test

import (
	"godsa/problems/arrays/threesumclosest"
	"reflect"
	"testing"
	"time"
)

func TestThreeSumClosest(t *testing.T) {
	tests := []struct {
		name   string
		input  []int
		target int
		want   int
	}{
		{
			name:   "tc1",
			input:  []int{-1, 2, 1, -4},
			target: 1,
			want:   2,
		},
		{
			name:   "tc2",
			input:  []int{0, 0, 0},
			target: 1,
			want:   0,
		},
		{
			name:   "tc3",
			input:  []int{40, -53, 36, 89, -38, -51, 80, 11, -10, 76, -30, 46, -39, -15, 4, 72, 83, -25, 33, -69, -73, -100, -23, -37, -13, -62, -26, -54, 36, -84, -65, -51, 11, 98, -21, 49, 51, 78, -58, -40, 95, -81, 41, -17, -70, 83, -88, -14, -75, -10, -44, -21, 6, 68, -81, -1, 41, -61, -82, -24, 45, 19, 6, -98, 11, 9, -66, 50, -97, -2, 58, 17, 51, -13, 88, -16, -77, 31, 35, 98, -2, 0, -70, 6, -34, -8, 78, 22, -1, -93, -39, -88, -77, -65, 80, 91, 35, -15, 7, -37, -96, 65, 3, 33, -22, 60, 1, 76, -32, 22},
			target: 292,
			want:   291,
		},
		{
			name:   "tc4",
			input:  []int{-448, 485, -986, 538, -612, 282, -719, 705, 332, -240, 932, -650, 79, 132, -749, -411, 370, 717, -90, 239, 290, -723, -2, 456, 569, 371, -971, 335, -643, -697, 357, -154, -108, 751, -391, 696, 224, 88, 634, -358, -369, 346, 424, -852, -179, 300, -432, -721, 106, 102, 181, 343, 657, 146, -3, 653, -37, -316, 34, -349, -715, -32, 488, 744, 430, 716, 680, -434, -572, 621, 851, -872, -547, 632, 8, -825, -251, -752, -414, -927, 963, 942, -911, -901, -86, -732, 649, 261, 802, -435, -241, 618, 926, -326, -59, -161, -383, -502, 879, 215, -985, -928, -113, -783, -840, 908, 140, 789, 490, -402, -449, -495, 94, -731, -574, -431, -808, 697, 767, 970, 236, -491, -833, 684, 466, -256, 541, 127, -99, 690, -633, -645, 78, -227, 235, -364, -168, 33, 295, 702, 66, -461, -931, 609, 366, -837, -961, -735, -569, 478, -702, -100, 340, 674, 206, 713, 243, -465, -257, -204, -82, -91, 930, 898, 481, -192, 411, -85, -124, 429, 505, 575, -846, 692, -338, -337, -658, 980, 654, -214, 950, 382, 35, 18, 421, -352, -932, 260, -462, -589, -916, 495, -229, 515, 803, -624, 196, -832, -459, -648, -347, 348, -513, -107, -366, -505, 568, 426, 289, 800, 122, 37, -422, -254, 172, 142, 303, -23, -24, -61, 19, -677, 38, -978, 706, -596, 492, 633, -883, 625, 480, 743, 766, 630, 416, 105, -995, 810, -120, -866, 15, -267, 214, -859, 704, -356, 232, -663, 311, 219, -726, -442, -511, 739, 23, -593, 675, -149, -485, 828, -561, -666, 197, -608, 48, -670, -618, 501, 164, -325, -132, 330, -543, 439, -842, 463, 718, 899, -567, 161, -328, -759, -820, -772, 600, 664, 648, 68, 667, 671, 967, 17, 555, -150, -532, -968, -556, -117, -614, -962, -141, -460, -754, 770, -767, 327, 858, 54, 159, 333, 561, 137, -269, 540, -667, -95, -818, 507, 587, -40, -133, -566, -700, 647, -456, -474, 738, 61, 936, -553, 293, 957, -621, -497, -811, -720, -557, 960, 286, 650, -25, -742, 341, -771, 43, -654, -454, -109, -854, -933, 452, -786, -350, -892, -472, -533, 572, -268, 585, 870, 317, -453, 153, -345, -409, 263, 193, -76, 209, -123, 302, -510, 672, -531, -857, 328, -929, -151, -861, 856, 281, 114, -266, -551, 222, -942, -826, -291, 259, 202, -220, -138, 620, -158, 683, -571, 415, -895, 262, 432, 312, -885, 76, -249, -333, -774, 610, 247, 938, -806, -630, -169, -81, -172, 391, 750, 897, -329, -234, -616, -554, 829, -145, 893, 590, 199, 231, -201, 2, -924, -210, -419, 176, 536, -530, -87, -864, 73, 709, 392, -764, -207, -184, 722, 836, -584, -183, -129, -116, 412, -429, -387, 824, -891, 983, 50, 543, -446, -758, 180, 385, -15, 165, 40, 301, 771, 558, -945, -661, -862, 162, 201, -734, 476, 978, 943, 313, -642, 548, -923, -637, -595, 177, -286, 774, 457, 248, 130, 223, 780, 190, -298, -445, -521, 784, -996, -951, -744, -779, 143, 489, 808, 719, -652, -103, -357, 258, 864, 880, 487, 297, 45, -31, -219, -599, 20, -299, -499, 574, 62, 812, 4, 342, 125, -678, -581, -878, 637, 12, 451, 666, -51, 268, 418, -617, -436, 237, -631, 991, -253, -49, 230, -248, -361, -685, -582, -751, 516, -827, 560, 761, 423, 601, -47, -970, -148, -615, 323, 687, -994, -205, 270, 150, 820, -36, 994, 179, 554, 364, -699, 778, -689, -239, 873, 53, -288, 517, 131, -991, 817, -729, -601, 388, 171, 446, 529, -20, -706, -777, 49, -261, -1, 885, 233, -294, 58, -224, 849, -202, 316, 448, 304, 502, -55, 277, -792, -605, -476, 468, -481, 244, 31, -712, 883, 753, -250, 924, -11, 984, 119, 407, 59, 998, 605, 356, -115, -73, 773, -342, -196, 324, 946, 565, -130, 151, -206, 611, 93, 306, -114, -528, 77, -692, -844, -353, 921, 462, -53, 982, -947, -590, -796, 374, -703, -893, 993, -701, 798, 855, 570, 971, -541, -410, -164, -447, 597, -813, 846, 163, 245, 809, -851, 406, 408, -34, 904, -690, -437, 727, 419, -967, 240, -194, -423, -236, -849, 427, 935, -756, -199, 726, -907, -534, -285, 504, -173, 586, 349, -221, 534, 987, -570, 298, -336, -276, -559, 70, -102, -407, 564, 582, -255, 367, -656, -610, 116, 52, 720, -660, -297, -406, -438, 624, -165, -850, 807, -33, -549, 592, -508, -955, 747, -360, 344, -586, -912, -787, 742, -35, -370, -597, -710, 631, -18, -335, 640, 115, -7, -843, 623, 221, 87, -917, -579, -935, -953, -819, -800, 643, -952, -576, -831, -44, 711, 284, -270, -520, 542, -263, -672, -140, 319, 535, -708, -644, -426, 965, 149, 431, -761, -745, -458, 840, 958, -930, -226, -39, -877, -896, 603, 469, 99, -757, 768, 857, 475, -348, 920, -334, -170, 109, 414, -997, 596, 886, -223, -855, 891, 673, -580, 380, -66, -260, 737, 320, 454, 954, 796, 888, -308, -243, -509, -525, 514, -535, -287, -834, -993, 25, 353, 7, 525, 75, 816, 325, -934, 710, -573, -542, 345, 134, -578, 658, -29, 136, 92, 593, -382, 556, 533, 211, -156, -331, 528, -908, 614, -393, -780, -69, 305, -89, 651, 703, -6, 393, -433, -300, -340, 748, 274, -272, 933, 56, 497, -974, -711, -480, -743, 36, 783, 794, -600, -231, 821, -766, 265, -147, -228, -512, 693, -88, 686, -309, 915, -867, 577, 583, 482, -716, -725, 694, -17, 410, -999, 799, -683, -375, -500, 551, 844, -909, 185, 917, -785, 804, -323, 952, 890, 205, 730, 695, 679, 381, 763, -873, 792, 813, -898, 148, -915, -93, -824, -507, 655, -418, -232, 194, 288, -311, -277, -794, -355, 369, 510, 450, -374, 187, 144, 299, 483, 60, -602, 0, 32, -868, -396, 296, -245, 21, -421, -773, -992, -127, 866, 896, 362, 715, 365, -111, -963, 141, -904, -918, -104, -19, -822, -789, -163, 156, -380, 103, -9, 762, -167, 659, -38, -522, 968, 944, 923, 918, -273, 437, -187, -317, 903, 30, 81, 986, -640},
			target: 3948,
			want:   291,
		},
	}

	for _, tcase := range tests {
		t.Run(tcase.name, func(t *testing.T) {
			now := time.Now()
			if got := threesumclosest.ThreeSumClosest(tcase.input, tcase.target); !reflect.DeepEqual(got, tcase.want) {
				t.Errorf("\ngot: %v \nwant: %v", got, tcase.want)
			}
			t.Log(tcase.name, " time: ", time.Since(now))
		})
	}
}
